apply plugin: 'com.jfrog.bintray'

version = libraryVersion

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false //必须添加以免出错
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}


artifacts {
    archives javadocJar
    archives sourcesJar
}

javadoc {
    options {
        //如果你的项目里面有中文注释的话，必须将格式设置为UTF-8，不然会出现乱码
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        links "http://docs.oracle.com/javase/7/docs/api"
    }
}
//
//android.libraryVariants.all { variant ->
//    println variant.javaCompile.classpath.files
//    if(variant.name == 'release') {
//        task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
//            // title = ''
//            // description = ''
//            source = variant.javaCompile.source
//            options {
//                encoding "utf-8"
//                links "http://docs.oracle.com/javase/7/docs/api/"
//                linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
//            }
//            exclude '**/BuildConfig.java'
//            exclude '**/R.java'
//
//            doFirst {
//                classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
//            }
//        }
//        task("javadoc${variant.name.capitalize()}Jar", type: Jar, dependsOn: "generate${variant.name.capitalize()}Javadoc") {
//            classifier = 'javadoc'
//            doLast{
//                from tasks.getByName("generate${variant.name.capitalize()}Javadoc").destinationDir
//            }
//        }
//        artifacts {
//            archives tasks.getByName("javadoc${variant.name.capitalize()}Jar")
//        }
//    }
//}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}